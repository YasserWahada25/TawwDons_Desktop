package models;

import javafx.fxml.FXML;
import javafx.geometry.Pos;
import javafx.scene.control.Label;
import javafx.scene.control.ScrollPane;
import javafx.scene.control.TextField;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;

import java.util.Map;

public class ChatController {

    @FXML private VBox chatBox;
    @FXML private TextField chatInput;
    @FXML private ScrollPane scrollPane;

    @FXML
    private void envoyer() {
        String userMessage = chatInput.getText().trim();
        if (userMessage.isEmpty()) return;

        // Affichage utilisateur
        ajouterBulle(userMessage, "#ecf0f1", Pos.BASELINE_RIGHT);

        // R√©ponse
        String reponse = genererReponse(userMessage.toLowerCase());
        ajouterBulle(reponse, "#dff9fb", Pos.BASELINE_LEFT);

        chatInput.clear();

        // Scroll automatique
        scrollPane.layout();
        scrollPane.setVvalue(1.0);
    }

    private void ajouterBulle(String message, String couleur, Pos align) {
        Label label = new Label(message);
        label.setWrapText(true);
        label.setMaxWidth(380);
        label.setStyle("-fx-background-color: " + couleur + "; -fx-background-radius: 10; -fx-padding: 10;");

        HBox hbox = new HBox(label);
        hbox.setAlignment(align);
        chatBox.getChildren().add(hbox);
    }

    private String genererReponse(String question) {
        Map<String, String> reponses = Map.ofEntries(
                Map.entry("stress", "Respire, m√©dite un peu, ou fais une pause üéß"),
                Map.entry("anxieux", "Parle √† quelqu‚Äôun, respire profond√©ment ü§ù"),
                Map.entry("sommeil", "Essaie d‚Äô√©teindre les √©crans 1h avant de dormir üò¥"),
                Map.entry("concentration", "Fais des pauses r√©guli√®res pour rester focus üéØ"),
                Map.entry("sport", "Un peu d‚Äôexercice stimule le cerveau üèÉ‚Äç‚ôÇÔ∏è"),
                Map.entry("eau", "Boire de l‚Äôeau t‚Äôaide √† rester concentr√© üíß"),
                Map.entry("motivation", "Tu es capable de grandes choses üí™"),
                Map.entry("bonjour", "Salut ! Pose-moi une question sur ta sant√© ou ton √©tude üòä"),
                Map.entry("salut", "Hello ! Je suis l√† pour t‚Äôaider ‚ú®"),
                Map.entry("merci", "Avec plaisir ! üòä"),
                Map.entry("question", "Lis-la attentivement et identifie les mots cl√©s !"),
                Map.entry("calme", "Le calme est la cl√© de la r√©ussite üåø"),
                Map.entry("r√©vision", "R√©vise avec m√©thode et r√©gularit√© üìò"),
                Map.entry("examens", "Pr√©pare un planning et reste confiant üìÖ"),
                Map.entry("fatigue", "Prends une pause, hydrate-toi et dors bien üòå")
        );


        return reponses.entrySet().stream()
                .filter(entry -> question.contains(entry.getKey()))
                .map(Map.Entry::getValue)
                .findFirst()
                .orElse("Je ne suis pas s√ªr de comprendre... peux-tu reformuler ?");
    }
}
